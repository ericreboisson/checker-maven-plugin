package org.elitost.maven.plugins.checkers;

import org.elitost.maven.plugins.renderers.ReportRenderer;
import org.apache.maven.model.Dependency;
import org.apache.maven.plugin.logging.Log;
import org.apache.maven.project.MavenProject;

import java.util.ArrayList;
import java.util.List;

/**
 * V√©rifie que les d√©pendances d‚Äôun projet Maven ne contiennent pas de versions cod√©es en dur dans le `pom.xml`.
 * <p>
 * Ce checker a pour objectif d‚Äôencourager l‚Äôusage de propri√©t√©s Maven dans la section {@code <properties>},
 * facilitant ainsi la maintenance, la mont√©e de versions centralis√©e et les bonnes pratiques de configuration.
 * </p>
 *
 * <p>Le rapport est g√©n√©r√© au format choisi (Markdown, HTML‚Ä¶) via une impl√©mentation de {@link ReportRenderer}.</p>
 *
 * @author Eric
 */
public class HardcodedVersionChecker {

    private static final String ANCHOR_ID = "hardcoded-versions";

    private final Log log;
    private final ReportRenderer renderer;

    /**
     * Construit un checker des versions cod√©es en dur.
     *
     * @param log      le logger Maven pour afficher les informations et avertissements
     * @param renderer le renderer responsable de la g√©n√©ration du rapport (Markdown, HTML, etc.)
     */
    public HardcodedVersionChecker(Log log, ReportRenderer renderer) {
        this.log = log;
        this.renderer = renderer;
    }

    /**
     * G√©n√®re un rapport listant les d√©pendances dont les versions sont cod√©es en dur.
     *
     * @param project le projet Maven √† analyser
     * @return une cha√Æne contenant le rapport format√© (Markdown, HTML, etc.)
     */
    public String generateHardcodedVersionReport(MavenProject project) {
        List<Dependency> hardcodedDeps = findHardcodedDependencies(project);

        if (hardcodedDeps.isEmpty()) {
            // Ne rien afficher si tout est OK
            return "";
        }

        StringBuilder report = new StringBuilder();

        // Rapport
        report.append(renderer.renderHeader3("üß± Versions cod√©es en dur d√©tect√©es dans `" + project.getArtifactId() + "`"));
        report.append(renderer.openIndentedSection());


        report.append(renderer.renderParagraph(
                "Les d√©pendances suivantes utilisent une version d√©finie en dur dans le `pom.xml`, au lieu d‚Äôune propri√©t√© `${...}`.\n" +
                        "Cela nuit √† la centralisation et √† la maintenabilit√© des versions."));

        // Table des d√©pendances concern√©es
        String[] headers = { "üè∑Ô∏è Group ID", "üìò Artifact ID", "üî¢ Version cod√©e en dur" };
        String[][] rows = hardcodedDeps.stream()
                .map(dep -> {
                    log.warn(String.format("[HardcodedVersionChecker] Version cod√©e en dur : %s:%s:%s",
                            dep.getGroupId(), dep.getArtifactId(), dep.getVersion()));
                    return new String[]{
                            dep.getGroupId(),
                            dep.getArtifactId(),
                            renderer.renderWarning(dep.getVersion())
                    };
                })
                .toArray(String[][]::new);

        report.append(renderer.renderTable(headers, rows));
        report.append(renderer.renderParagraph(
                "üí° Conseil : remplace chaque version cod√©e en dur par une propri√©t√© Maven d√©finie dans la section `<properties>` du parent ou d‚Äôun BOM."));

        report.append(renderer.closeIndentedSection());
        return report.toString();
    }

    /**
     * Recherche les d√©pendances d√©finies avec une version cod√©e en dur (non dynamique).
     *
     * @param project le projet Maven √† inspecter
     * @return une liste de d√©pendances avec une version fixe (non ${...})
     */
    private List<Dependency> findHardcodedDependencies(MavenProject project) {
        List<Dependency> result = new ArrayList<>();

        List<Dependency> declaredDependencies = project.getOriginalModel().getDependencies();
        if (declaredDependencies == null || declaredDependencies.isEmpty()) {
            return result;
        }

        for (Dependency dependency : declaredDependencies) {
            String version = dependency.getVersion();
            if (version != null && !version.trim().isEmpty() && !version.trim().startsWith("${")) {
                result.add(dependency);
            }
        }

        return result;
    }
}