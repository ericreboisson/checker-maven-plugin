package org.elitost.maven.plugins.checkers;

import org.elitost.maven.plugins.CheckerContext;
import org.elitost.maven.plugins.renderers.ReportRenderer;
import org.apache.maven.model.Dependency;
import org.apache.maven.plugin.logging.Log;
import org.apache.maven.project.MavenProject;

import java.util.ArrayList;
import java.util.List;

/**
 * V√©rifie que les d√©pendances d‚Äôun projet Maven ne contiennent pas de versions cod√©es en dur dans le `pom.xml`.
 * Encourage l‚Äôusage de propri√©t√©s Maven pour une meilleure maintenabilit√©.
 */
public class HardcodedVersionChecker implements CustomChecker, InitializableChecker {

    private Log log;
    private ReportRenderer renderer;

    /** Constructeur sans argument pour l'utilisation via SPI */
    public HardcodedVersionChecker() {}

    @Override
    public void init(Log log,
                     org.eclipse.aether.RepositorySystem repoSystem,
                     org.eclipse.aether.RepositorySystemSession session,
                     List<org.eclipse.aether.repository.RemoteRepository> remoteRepositories,
                     ReportRenderer renderer) {
        this.log = log;
        this.renderer = renderer;
    }

    @Override
    public String getId() {
        return "hardcodedVersion";
    }

    /**
     * G√©n√®re un rapport listant les d√©pendances dont les versions sont cod√©es en dur.
     */
    @Override
    public String generateReport(CheckerContext checkerContext) {
        List<Dependency> hardcodedDeps = findHardcodedDependencies(checkerContext.getCurrentModule());

        if (hardcodedDeps.isEmpty()) {
            return "";
        }

        StringBuilder report = new StringBuilder();
        String artifactId = checkerContext.getCurrentModule().getArtifactId();

        report.append(renderer.renderHeader3("üß± Versions cod√©es en dur d√©tect√©es dans `" + artifactId + "`"));
        report.append(renderer.openIndentedSection());
        report.append(renderer.renderError(
                "Les d√©pendances suivantes utilisent une version d√©finie en dur dans le `pom.xml`, au lieu d‚Äôune propri√©t√© `${...}`.\n" +
                        "Cela nuit √† la centralisation et √† la maintenabilit√© des versions."));

        String[] headers = { "üè∑Ô∏è Group ID", "üìò Artifact ID", "üî¢ Version cod√©e en dur" };
        String[][] rows = hardcodedDeps.stream()
                .map(dep -> {
                    log.warn(String.format("[HardcodedVersionChecker] Version cod√©e en dur : %s:%s:%s",
                            dep.getGroupId(), dep.getArtifactId(), dep.getVersion()));
                    return new String[]{
                            dep.getGroupId(),
                            dep.getArtifactId(),
                            renderer.renderWarning(dep.getVersion())
                    };
                })
                .toArray(String[][]::new);

        report.append(renderer.renderTable(headers, rows));
        report.append(renderer.renderParagraph(
                "üí° Conseil : remplace chaque version cod√©e en dur par une propri√©t√© Maven d√©finie dans la section `<properties>` du parent."));
        report.append(renderer.closeIndentedSection());

        return report.toString();
    }

    /**
     * Recherche les d√©pendances d√©finies avec une version cod√©e en dur (non dynamique).
     */
    private List<Dependency> findHardcodedDependencies(MavenProject project) {
        List<Dependency> result = new ArrayList<>();

        List<Dependency> declaredDependencies = project.getOriginalModel().getDependencies();
        if (declaredDependencies == null || declaredDependencies.isEmpty()) {
            return result;
        }

        for (Dependency dependency : declaredDependencies) {
            String version = dependency.getVersion();
            if (version != null && !version.trim().isEmpty() && !version.trim().startsWith("${")) {
                result.add(dependency);
            }
        }

        return result;
    }
}